
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module MD5(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [7:0] kb_ascii;
wire [9:0] pos_h, pos_v;
wire [23:0] color;
wire kb_valid;
wire in_clk;
wire kb_check_clk;
wire [511:0] buff;
wire [63:0] buff_len;
wire line_finish;
wire [1023:0] result;
wire [7:0] result_len;

wire [127:0] result_md5;
wire ok;


//=======================================================
//  Structural coding
//=======================================================


clkgen #(10000) clk_in(
	.clkin(CLOCK_50), 
	.rst(1'b0), 
	.clken(1'b1), 
	.clkout(in_clk)
);


md5_abcd_sequence_adjust md5_adjust(
	.MD5_output(result_md5),
	.MD5_result(result), 
	.MD5_result_len(result_len)
);

md5_ctrl md5c(
	.in_clk(in_clk), 
	.indata(buff), 
	.start(line_finish), 
	.len(buff_len), 
	.MD5code(result_md5), 
	.finish(ok)
);

//std:------------------------------>
clkgen #(25000000) vga_clk(
	.clkin(CLOCK_50), 
	.rst(1'b0), 
	.clken(1'b1), 
	.clkout(VGA_CLK)
);

clkgen #(200) clk_kb_check(	
	.clkin(CLOCK_50), 
	.rst(1'b0), 
	.clken(1'b1), 
	.clkout(kb_check_clk)
);

keyboard_con kb_con(
	.clk(CLOCK_50), 
	.ps2_clk(PS2_CLK), 
	.ps2_data(PS2_DAT), 
	.cur_ascii(kb_ascii), 
	.valid(kb_valid)
);

vga_ctrl vga(
	.pclk(VGA_CLK), 
	.reset(1'b0), 
	.vga_data(color), 
	.h_addr(pos_h), 
	.v_addr(pos_v), 
	.hsync(VGA_HS), 
	.vsync(VGA_VS), 
	.valid(VGA_BLANK_N), 
	.vga_r(VGA_R), 
	.vga_g(VGA_G), 
	.vga_b(VGA_B)
);

io_manager io(
	.clk(CLOCK_50), 
	.in_clk(in_clk), 
	.kb_check_clk(kb_check_clk), 
	.kb_valid(kb_valid), 
	.kb_input(kb_ascii), 
	.scan_h(pos_h), 
	.scan_v(pos_v), 
	.vga_output(color), 
	.buff(buff), 
	.buff_len(buff_len), 
	.line_finish(line_finish), 
	.result(result), 
	.result_len(result_len), 
	.ok(ok)
);

assign HEX0 = 7'h7f;
assign HEX1 = 7'h7f;
assign HEX2 = 7'h7f;
assign HEX3 = 7'h7f;
assign HEX4 = 7'h7f;
assign HEX5 = 7'h7f;
assign LEDR[9:4] = 6'hz;
assign LEDR[3:1] = 3'hz;
assign LEDR[0] = kb_valid;

endmodule
