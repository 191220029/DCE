// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/02/2020 18:51:32"
                                                                                
// Verilog Test Bench template for design : shift_register
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module shift_register_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg CLOCK_50;
reg [3:0] KEY;
reg [9:0] SW;
// wires                                               
wire [9:0]  LEDR;

// assign statements (if any)                          
shift_register i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.KEY(KEY),
	.LEDR(LEDR),
	.SW(SW)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
CLOCK_50 = 0;
//置数
KEY[2:0] = 3'b001;
SW[7:0] = 8'b11011011; #7;
//算数右移
	//移动2位
KEY[2:0] = 3'b100; #20;	//结果应为：11110110
//逻辑左移
	//移动1位
KEY[2:0] = 3'b011; #10; //结果应为：11101100
//逻辑右移
	//移动1位
KEY[2:0] = 3'b010; #10; //结果应为：01110110
//清零
KEY[2:0] = 3'b000; #10;
//串入并出
KEY[2:0] = 3'b101;
	SW[0] = 0; #10;
	SW[0] = 1; #10;
	SW[0] = 1; #10;
	SW[0] = 0; #10;
	SW[0] = 0; #10;
	SW[0] = 1; #10;
	SW[0] = 0; #10;
	SW[0] = 0; #10;
	//结果应为：00100110

//循环右移
	//移动3位
KEY[2:0] = 110; #30;	//结果应为11000100
//循环左移
	//移动3位
KEY[2:0] = 111; #30; //结果应为00100110



//

  $stop;                                                     
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
     #5  CLOCK_50 = ~CLOCK_50;                                                 
//@eachvec;                                              
// --> end                                             
end
endmodule

