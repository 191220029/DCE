
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module exp09(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [23:0]vga_data;
reg [23:0]data = 24'hffffff;
wire [9:0] h_addr;
wire [9:0] v_addr;
assign VGA_R = vga_data[23:16];
assign VGA_G = vga_data[15:8];
assign VGA_B = vga_data[7:0];

assign VGA_SYNC_N = 1'b0;
//=======================================================
//  Structural coding
//=======================================================


clkgen #(25000000) my_vgaclk(CLOCK_50,SW[0],1'b1,VGA_CLK);
//vga_ctrl(pclk,reset,vga_data,[9:0] h_addr,[9:0] v_addr,hsync,vsync,valid,[7:0] vga_r,[7:0] vga_g,[7:0] vga_b);
vga_ctrl ctrl0(VGA_CLK, SW[1], data, h_addr, v_addr, VGA_HS, VGA_VS, VGA_BLANK_N, vga_data[23:16], vga_data[15:8], vga_data[7:0]);

//竖向条纹
/*
always @(v_addr) begin 
	if(v_addr < 160)
		data = 24'hff0000;
	else if(v_addr < 320)
		data = 24'h90ee90;
	else if(v_addr < 480)
		data = 24'h0000ff;
	else;
end*/
//横向条纹
always @(h_addr) begin 
	if(h_addr < 20) 
		data = 24'h000000;
	else if(h_addr < 21 + 200 && h_addr > 19)
		data = 24'h0000ff;
	else if(h_addr < 20 + 400)
		data = 24'hf8f8ff;
	else if(h_addr < 20 + 600)
		data = 24'hdc143c;
	else data = 24'h000000;
end


endmodule
